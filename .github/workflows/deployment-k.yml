name: Deployment Pipeline

on:
  pull_request:
    types: [closed]
    branches: [main,master]
  workflow_dispatch:

jobs:
  # CI: Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      
      - name: Build and Push Frontend and Backend Images to Docker Hub
        run: |
          docker compose -f dockerfiles/docker-compose.yml build
          docker compose -f dockerfiles/docker-compose.yml push

  # CD: Deploy to Kubernetes (on your VM running k3s)
  deploy-on-k8s:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Connect to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script: |
            echo "Connected to VPS successfully!"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.0   # match your k3s version if needed

      - name: Configure Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      - name: Install Doppler CLI
        run: |
          if ! command -v doppler &> /dev/null; then
            curl -Ls https://cli.doppler.com/install.sh | sudo sh
          else
            echo "Doppler is already installed"
          fi

      - name: Sync Doppler secrets to K8s
        run: |
            export DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }}
            doppler secrets download --no-file --format docker > .env
            kubectl create secret generic doppler-secrets \
            --from-env-file=.env \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Create Cloudflare TLS secret
        run: |
            kubectl create secret tls cloudflare-cert \
              --cert=<(echo "${{ secrets.CLOUDFLARE_CERT }}") \
              --key=<(echo "${{ secrets.CLOUDFLARE_KEY }}") \
              -n default --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/traefik-config.yaml
          kubectl apply -f k8s/db-deployment.yaml
          kubectl apply -f k8s/server-deployment.yaml
          kubectl apply -f k8s/client-deployment.yaml
          kubectl apply -f k8s/ingress-service.yaml
